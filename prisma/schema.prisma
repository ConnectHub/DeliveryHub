// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  DELIVERED
  CANCELED
}

enum Role {
  ADMIN
  TRUSTEE
  DOORMAN
}

model order {
  id              String      @id @unique @default(uuid())
  url             String      @unique @default(cuid())
  code            String
  img             String?
  description     String?
  trackingCode    String?
  status          Status      @default(PENDING)
  sender          String?
  sign            String?
  signDateHour    DateTime?
  receiptDateHour DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt
  deletedAt       DateTime?
  addressee       resident    @relation(fields: [addresseeId], references: [id])
  addresseeId     String
  condominium     condominium @relation(fields: [condominiumId], references: [id])
  condominiumId   String

  @@map("Order")
}

model resident {
  id                String      @id @unique @default(uuid())
  name              String
  buildingApartment String
  phoneNumber       String
  email             String?     @unique
  condominiumId     String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now()) @updatedAt
  deletedAt         DateTime?
  condominium       condominium @relation(fields: [condominiumId], references: [id])
  order             order[]

  @@index([name, buildingApartment])
  @@map("Resident")
}

model condominium {
  id        String     @id @unique @default(uuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  deletedAt DateTime?
  resident  resident[]
  user      user[]
  order     order[]

  @@map("Condominium")
}

model user {
  id            String      @id @unique @default(uuid())
  login         String      @unique
  password      String
  name          String
  roles         Role[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  deletedAt     DateTime?
  condominiumId String
  rateId        String?
  rate          rate?       @relation(fields: [rateId], references: [id])
  condominium   condominium @relation(fields: [condominiumId], references: [id])

  @@map("User")
}

model rate {
  id        String    @id @unique @default(uuid())
  value     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  user      user[]
}

model inboxMessageErrors {
  id        String    @id @unique @default(uuid())
  orderId   String
  message   String
  error     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  @@map("InboxMessageErrors")
}
